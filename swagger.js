const swaggerAutogen = require("swagger-autogen")({openapi:"3.0.0"});
const log = require("npmlog");
const mongoose = require("mongoose");
const Schema = mongoose.Schema;
const doc = {
  info: {
    version: "1.0.0",
    title: "Skill Tree API-Platform",
    description: "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  basePath: "/v1",
  schemes: ["http", "https"],
  consumes: ["application/json"],
  produces: ["application/json"],
  tags: [
    {
      "name": "User",
      "description": "The endpoints for User information"
    },
    {
      "name": "Skill",
      "description": "The endpoints for Skill information"
    },
    {
      "name": "Item",
      "description": "The endpoints for Item information"
    },
    {
      "name": "Task",
      "description": "The endpoints for Task information"
    },
    {
      "name": "Challenge",
      "description": "The endpoints for Challenge information"
    },
    {
      "name": "Controller",
      "description": "The endpoints for root controller. [Development only?]"
    }
  ],
  securityDefinitions: {
    apiKeyAuth:{
      type: "apiKey",
      in: "header",
      name: "API_KEY",
      description: "A key used to communicate with the API"
    }
  },
  definitions: {
    User: {
      pic: "https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg",
      level:5,
      dm_enabled: true,
      username: "John_Doe",
      password: "mias87dh32d7h36gdasdghyh1ds8326ga6w8d",
      discordid: 1234567890,
      xp:1500,
      xpHistory: 12345,
      items:[Schema.Types.ObjectId],
      completed:[Schema.Types.ObjectId],
      inprogress:[Schema.Types.ObjectId],
      difficulty:"easy",
      character: "male",
      timezone: "GMT+0:00",
      baseLocation:[Schema.Types.ObjectId],
      lastTracked: "9999-12-31 11:59:59",
      numDaysTracked: 999,
    },
    Skill: {
      title: "Example_I",
      level: 99,
      goal: "",
      frequency: 99,
      interval: ["day", "week", "month", "year"],
      timelimit: "",
      xp: 10,
      category: "",
      requires: [],
      children: [],
    },
    Challenge: {
      goal: "Example Goal",
      xp: 1234567890,
      category: "Example Category",
      requires: [Schema.Types.ObjectId],
    },
    Task:{
      skillID: Schema.Types.ObjectId,
      userID: Schema.Types.ObjectId,
      data: {
        type: [false, false, false]
      },
      startDate: Date.now(),
      completed: true,
    },
    Item:{
      name: "Item Name",
      link: "https://www.link_to_item_information.com/",
      emoji: "Emoji",
      requires: [Schema.Types.ObjectId],
    },
    AddSkill: {
      iconName: "Icon_A",
      title: "Example_I",
      level: "",
      goal: "",
      time: "",
      frequency: ["daily","weekly","monthly", "annually"],
      xp: 10,
      category: "",
      requirements: [],
      children: []
    },
    AddUser: {
      username: "John_Doe",
      password: "mias87dh32d7h36gdasdghyh1ds8326ga6w8d",
      pic: "https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg",
      exp:1500,
      level:5,
      items:[Schema.Types.ObjectId],
      skillscompleted:[Schema.Types.ObjectId],
      skillsinprogress:[Schema.Types.ObjectId],
    },
  },
  servers: [
    {
      url: "http://localhost:8080/",
      description: "Local Development server",
    }
  ]
};

const outputFile = "./swagger-output.json";
const endpointsFiles = ["./src/api/routes/v1/*.routes.js"];

swaggerAutogen(outputFile, endpointsFiles, doc).then(() => {
  require("./src/index");
}).catch((err) => {
  log.error(err);
});